generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChronicleStatus {
  draft
  published
  read
}

model Broadcast {
  id                 String                 @id @default(uuid())
  title              String                 @db.Text
  prefix             String                 @unique @db.Uuid
  editor             String                 @unique @db.Text
  //reader is use for the slider and the reader
  reader             String                 @unique @db.Text
  started_at         DateTime?              @db.Timestamp(6)
  ended_at           DateTime?              @db.Timestamp(6)
  createdAt          DateTime               @default(now()) @db.Timestamp(6)
  updatedAt          DateTime               @updatedAt
  chronicles         Chronicle[]
  editors            Editor[]
  History            UserBroadcastHistory[]
  ChronicleHistories ChronicleHistory[]
}

model ChronicleHistory {
  id           String     @id @default(uuid())
  broadcast_id String?    @db.Text
  broadcast    Broadcast? @relation(fields: [broadcast_id], references: [id])
  title        String     @db.Text
  source       String?    @db.Text
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  editor       String
}

model Editor {
  id           String      @id @default(uuid())
  name         String      @db.Text
  broadcast    Broadcast   @relation(fields: [broadcast_id], references: [id])
  broadcast_id String      @db.Text
  createdAt    DateTime    @default(now()) @db.Timestamp(6)
  chronicles   Chronicle[]
}

model Chronicle {
  id           String          @id @default(uuid())
  broadcast_id String?         @db.Text
  broadcast    Broadcast?      @relation(fields: [broadcast_id], references: [id])
  title        String          @db.Text
  position     Int
  text         String?         @db.Text
  status       ChronicleStatus @default(draft)
  source       String?         @db.Text
  createdAt    DateTime        @default(now()) @db.Timestamp(6)
  updatedAt    DateTime        @updatedAt
  medias       Media[]
  editor       Editor?         @relation(fields: [editorId], references: [id])
  editorId     String?         @db.Text
}

model Media {
  id           String    @id @default(uuid())
  source       String    @db.Text
  name         String    @db.Text
  type         String    @db.Text
  url          String    @db.Text
  cover        String?   @db.Text
  size         Int       @default(0)
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  chronicle_id String    @db.Text
  chronicle    Chronicle @relation(fields: [chronicle_id], references: [id])
}

model Layout {
  id        String   @id @default(uuid())
  name      String   @db.Text
  layout    Json
  createdAt DateTime @default(now()) @db.Timestamp(6)
  current   Boolean  @default(false)
  user_id   String   @db.Text
}

model UserBroadcastHistory {
  id           String    @id @default(uuid())
  broadcast_id String    @db.Text
  broadcast    Broadcast @relation(fields: [broadcast_id], references: [id])
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  user_id      String    @db.Text
}
