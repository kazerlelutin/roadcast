generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("RC_PRISMA_URL") // uses connection pooling
  directUrl = env("RC_URL_NON_POOLING") // uses a direct connection
}

enum ChronicleStatus {
  draft
  published
  read
}

enum ScheduleStatus {
  project
  delayed
  progress
  done
}

model Broadcast {
  id                 String                 @id @default(uuid())
  title              String                 @db.Text
  prefix             String                 @unique @db.Uuid
  editor             String                 @unique @db.Text
  //reader is use for the slider and the reader
  reader             String                 @unique @db.Text
  started_at         DateTime?              @db.Timestamp(6)
  ended_at           DateTime?              @db.Timestamp(6)
  createdAt          DateTime               @default(now()) @db.Timestamp(6)
  updatedAt          DateTime               @updatedAt
  chronicles         Chronicle[]
  editors            Editor[]
  history            UserBroadcastHistory[]
  chronicleHistories ChronicleHistory[]
  schedule           Schedule?
}

model ChronicleHistory {
  id           String     @id @default(uuid())
  broadcast_id String?    @db.Text
  broadcast    Broadcast? @relation(fields: [broadcast_id], references: [id])
  title        String     @db.Text
  source       String?    @db.Text
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  editor       String
}

model Editor {
  id                String           @id @default(uuid())
  name              String           @db.Text
  broadcast         Broadcast?       @relation(fields: [broadcast_id], references: [id])
  broadcast_id      String?          @db.Text
  createdAt         DateTime         @default(now()) @db.Timestamp(6)
  chronicles        Chronicle[]
  ScheduleAccount   ScheduleAccount? @relation(fields: [scheduleAccountId], references: [id])
  scheduleAccountId String?
  schedule          Schedule?        @relation(fields: [scheduleId], references: [id])
  scheduleId        String?
}

model Chronicle {
  id           String          @id @default(uuid())
  broadcast_id String?         @db.Text
  broadcast    Broadcast?      @relation(fields: [broadcast_id], references: [id])
  title        String          @db.Text
  position     Int
  text         String?         @db.Text
  status       ChronicleStatus @default(draft)
  source       String?         @db.Text
  createdAt    DateTime        @default(now()) @db.Timestamp(6)
  updatedAt    DateTime        @updatedAt
  medias       Media[]
  editor       Editor?         @relation(fields: [editorId], references: [id])
  editorId     String?         @db.Text
}

model Media {
  id           String    @id @default(uuid())
  source       String    @db.Text
  name         String    @db.Text
  type         String    @db.Text
  url          String    @db.Text
  cover        String?   @db.Text
  size         Int       @default(0)
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  chronicle_id String    @db.Text
  chronicle    Chronicle @relation(fields: [chronicle_id], references: [id])
}

model Layout {
  id        String   @id @default(uuid())
  name      String   @db.Text
  layout    Json
  createdAt DateTime @default(now()) @db.Timestamp(6)
  current   Boolean  @default(false)
  user_id   String   @db.Text
}

model UserBroadcastHistory {
  id           String    @id @default(uuid())
  broadcast_id String    @db.Text
  broadcast    Broadcast @relation(fields: [broadcast_id], references: [id])
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  user_id      String    @db.Text
}

model UserScheduleHistory {
  id               String          @id @default(uuid())
  schedule_id      String          @db.Text
  scheduleAccounts ScheduleAccount @relation(fields: [schedule_id], references: [id])
  createdAt        DateTime        @default(now()) @db.Timestamp(6)
  user_id          String          @db.Text
}

model ScheduleAccount {
  id                  String                @id @default(uuid())
  title               String                @db.Text
  prefix              String                @unique @db.Uuid
  editor              String                @unique @db.Text
  //reader for guests
  reader              String                @unique @db.Text
  createdAt           DateTime              @default(now()) @db.Timestamp(6)
  user_id             String                @db.Text
  schedules           Schedule[]
  userScheduleHistory UserScheduleHistory[]
  editors             Editor[]
  guests              Guest[]
}

model Schedule {
  id           String          @id @default(uuid())
  createdAt    DateTime        @default(now()) @db.Timestamp(6)
  start_at     DateTime?       @db.Timestamp(6)
  subject      String          @db.Text
  info         String          @db.Text
  status       ScheduleStatus  @default(project)
  account      ScheduleAccount @relation(fields: [account_id], references: [id])
  account_id   String          @db.Text
  broadcast    Broadcast?      @relation(fields: [broadcast_id], references: [id])
  broadcast_id String?         @unique @db.Text
  guests       Guest[]
  editors      Editor[]
}

model Guest {
  id                String          @id @default(uuid())
  name              String          @db.Text
  twitter           String?         @db.Text
  picture           String?         @db.Text
  link              String?         @db.Text
  bio               String?         @db.Text
  confirm           Boolean         @default(false)
  createdAt         DateTime        @default(now()) @db.Timestamp(6)
  scheduleAccount   ScheduleAccount @relation(fields: [scheduleAccountId], references: [id])
  scheduleAccountId String
  Schedule          Schedule?       @relation(fields: [schedule_id], references: [id])
  schedule_id       String?
}
